import base64
from os import path
from pydub import AudioSegment
import uuid

'''# files
src = "transcript.mp3"
dst = "test.wav"

# convert wav to mp3
sound = AudioSegment.from_mp3(src)
sound.export(dst, format="wav")'''


def ToFile(txt, file):
    with open(txt, 'r') as fileObj:
        base64_data = fileObj.read()
        missing_padding = len(base64_data) % 24
        num = len(base64_data) % 24
        if num != 0:
            base64_data = base64_data + '=' * (24 - num)
        print(len(base64_data))
        ori_image_data = base64.b64decode(base64_data)
        fout = open(file, 'wb')
        fout.write(ori_image_data)
        fout.close()


def mp3_to_wav(mp3_path, wav_path):
    song = AudioSegment.from_mp3(mp3_path)
    song.export(wav_path, format="wav")

if __name__ == '__main__':
    myuuid = uuid.uuid1()
    mp3_cache_path = str(myuuid) + "cache.mp3"
    base64_data = 'data:audio/mpeg:base64,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'
    ToFile('C:/Users/52954/Desktop/Impaired_Support_App/connector/python_project/b64.txt',mp3_cache_path)
    wav_cache_path = str(myuuid) + "cache.wav"
    mp3_to_wav(mp3_cache_path, wav_cache_path)
