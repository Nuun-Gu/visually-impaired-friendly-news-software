<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="cn.hhu.lewen.dao.mapper.UserMapper" >
  <!--
        这里是自动生成的resultMap,用于映射对象时,数据库列名与对象名不一一对应时,而存在的解决方案
        即把列名与映射对象的属性名一一对应起来,使得可以实现列名与对象名不一致也一样可以映射
        注意:
          因为都是逆向工程生成的,我们必须遵循一些规则:
          1. 数据库表的列名是单个单词时, 实体类对象的属性会与列名同名
          2. 数据库表的列名是多个单词且用_连接时,例如user_name,  实体类对象的属性会依照驼峰命名法删除_,例如userName
          3. 数据库表的列名是多个单词且直接连接时,例如userName,username , 实体类对象的属性会全小写,例如username

          因为属性名不采取驼峰命名法是不合理的, 所以要尽量避免第三种情况
   -->


<!--  column 要与数据库字段一模一样   而property是JavaBean的属性名-->
    <resultMap id="UserResultMap" type="cn.hhu.lewen.dao.pojo.User"  >
      <id column="user_id" property="userId" jdbcType="INTEGER"  />
      <result column="user_account" property="userAccount" jdbcType="VARCHAR" />
      <result column="user_password" property="userPassword" jdbcType="VARCHAR" />
      <result column="nickname" property="nickname" jdbcType="VARCHAR" />
      <result column="user_age" property="userAge" jdbcType="INTEGER" />
      <result column="user_sex" property="userSex" jdbcType="INTEGER" />
      <result column="user_tel" property="userTel" jdbcType="VARCHAR" />
      <result column="user_province" property="userProvince" jdbcType="VARCHAR" />
      <result column="user_city" property="userCity" jdbcType="VARCHAR" />
      <result column="user_mail" property="userMail" jdbcType="VARCHAR" />

    </resultMap>

    <select id="getUserInfoByUserId" resultMap="UserResultMap" parameterType="java.lang.String" >
      select
        *
      from user
      where user_id = #{userId}
    </select>
  
  <update id="setUserInfoByUserId" parameterType="cn.hhu.lewen.dao.pojo.User">
    update user
    <set>

      <if test="userPassword!=null">user_password = #{userPassword,jdbcType=VARCHAR},</if>
      <if test="nickname!=null">nickname = #{nickname,jdbcType=VARCHAR},</if>
      <if test="userAge!=null">user_age = #{userAge,jdbcType=INTEGER},</if>
      <if test="userSex!=null">user_sex = #{userSex,jdbcType=INTEGER},</if>
      <if test="userTel!=null">user_tel = #{userTel,jdbcType=VARCHAR},</if>
      <if test="userProvince!=null">user_province = #{userProvince,jdbcType=VARCHAR},</if>
      <if test="userCity!=null">user_city = #{userCity,jdbcType=VARCHAR},</if>
      <if test="userMail!=null">user_mail = #{userMail,jdbcType=VARCHAR}</if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>

  <resultMap id="isExistResultMap"   type="java.lang.Integer">
    <result column="is_exist" property="isExist"></result>
  </resultMap>
  <select id="isExist" resultMap="isExistResultMap" parameterType="java.lang.String">
    SELECT COUNT(*) as is_exist from user where user_account=#{userAccount}
  </select>

  <insert id="login" parameterType="java.lang.String">
    insert into user(user_account)
    values(#{userAccount})
  </insert>
<resultMap id="userId"   type="java.lang.String">
  <result column="user_id" property="userId"></result>
</resultMap>

  <select id="getUserIdByUserAccount" resultMap="userId" parameterType="java.lang.String">
    select user_id
    from user
    where user_account=#{userAccount}
  </select>

  <select id="authorLogin" resultType="java.lang.Integer" parameterType="cn.hhu.lewen.dao.vo.params.AuthorLoginParams">
    select count(*) from author
    where writer_account=#{writerAccount} and writer_password=#{writerPassword}
  </select>

  <select id="getAuthorId" resultType="java.lang.Integer" parameterType="cn.hhu.lewen.dao.vo.params.AuthorLoginParams">
    select writer_id from author
    where writer_account=#{writerAccount}
  </select>

  
  <!--  <resultMap id="BaseResultMap" type="cn.hhu.lewen.dao.pojo.Category" >-->
<!--    <id column="id" property="id" jdbcType="INTEGER" />-->
<!--    <result column="avatar" property="avatar" jdbcType="VARCHAR" />-->
<!--    <result column="category_name" property="categoryName" jdbcType="VARCHAR" />-->
<!--    <result column="description" property="description" jdbcType="VARCHAR" />-->
<!--  </resultMap>-->

<!--  <resultMap id="NewsResultMap" type="cn.hhu.lewen.dao.pojo.News" >-->
<!--    <id column="id" property="id" jdbcType="VARCHAR" />-->
<!--    <result column="title" property="title" jdbcType="VARCHAR" />-->
<!--    <result column="summary" property="summary" jdbcType="VARCHAR" />-->
<!--    <result column="comment_counts" property="commentCounts" jdbcType="INTEGER" />-->
<!--    <result column="view_counts" property="viewCounts" jdbcType="INTEGER" />-->
<!--    <result column="weight" property="weight" jdbcType="INTEGER" />-->
<!--    <result column="create_date" property="createDate" jdbcType="DATE" />-->
<!--    <result column="author" property="author" jdbcType="VARCHAR" />-->
<!--    <result column="body" property="body" jdbcType="VARCHAR" />-->
<!--    <result column="tags" property="tags" jdbcType="VARCHAR" />-->
<!--    <result column="category" property="category" jdbcType="VARCHAR" />-->

<!--  </resultMap>-->

<!--  <sql id="Base_Column_List" >-->
<!--    id, avatar, category_name, description-->
<!--  </sql>-->

<!--  <select id="selectAllCategories" resultMap="BaseResultMap" >-->
<!--    select -->
<!--    <include refid="Base_Column_List" />-->
<!--    from category-->
<!--  </select>-->

<!--  <select id="selectCategoryById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >-->
<!--    select-->
<!--    <include refid="Base_Column_List" />-->
<!--    from category-->
<!--    where id = #{id}-->
<!--  </select>-->

<!--  <select id="selectNewsByCategoryId" resultMap="NewsResultMap" parameterType="java.lang.Integer" >-->
<!--    select-->
<!--    news.id,news.title,news.summary,news.comment_counts,news.view_counts,news.weight,news.create_date,news.author,news.body,news.tags,news.category-->
<!--    from category,news-->
<!--    where category.id = #{id} and category.category_name=news.category-->
<!--  </select>-->

<!--  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >-->
<!--    delete from t_sb_user-->
<!--    where id = #{id,jdbcType=INTEGER}-->
<!--  </delete>-->
<!--  <insert id="insert" parameterType="com.mlming.springboot.entity.User" >-->
<!--    insert into t_sb_user (id, user_name, user_age-->
<!--      )-->
<!--    values (#{id,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{userAge,jdbcType=INTEGER}-->
<!--      )-->
<!--  </insert>-->

<!--  &lt;!&ndash;-->
<!--    这种逆向工程生成的,带有Selective字眼的,基本上就是使用MyBatis的动态sql这一语法-->
<!--    实现一个sql语句可以根据传递参数的不同,而有不同的结果-->
<!--    即: Selective:选择性的-->
<!--    这一点值得我们去学习-->
<!--  &ndash;&gt;-->

<!--  <insert id="insertSelective" parameterType="com.mlming.springboot.entity.User" >-->
<!--    insert into t_sb_user-->
<!--    <trim prefix="(" suffix=")" suffixOverrides="," >-->
<!--      <if test="id != null" >-->
<!--        id,-->
<!--      </if>-->
<!--      <if test="userName != null" >-->
<!--        user_name,-->
<!--      </if>-->
<!--      <if test="userAge != null" >-->
<!--        user_age,-->
<!--      </if>-->
<!--    </trim>-->
<!--    <trim prefix="values (" suffix=")" suffixOverrides="," >-->
<!--      <if test="id != null" >-->
<!--        #{id,jdbcType=INTEGER},-->
<!--      </if>-->
<!--      <if test="userName != null" >-->
<!--        #{userName,jdbcType=VARCHAR},-->
<!--      </if>-->
<!--      <if test="userAge != null" >-->
<!--        #{userAge,jdbcType=INTEGER},-->
<!--      </if>-->
<!--    </trim>-->
<!--  </insert>-->
<!--  <update id="updateByPrimaryKeySelective" parameterType="com.mlming.springboot.entity.User" >-->
<!--    update t_sb_user-->
<!--    <set >-->
<!--      <if test="userName != null" >-->
<!--        user_name = #{userName,jdbcType=VARCHAR},-->
<!--      </if>-->
<!--      <if test="userAge != null" >-->
<!--        user_age = #{userAge,jdbcType=INTEGER},-->
<!--      </if>-->
<!--    </set>-->
<!--    where id = #{id,jdbcType=INTEGER}-->
<!--  </update>-->
<!--  <update id="updateByPrimaryKey" parameterType="com.mlming.springboot.entity.User" >-->
<!--    update t_sb_user-->
<!--    set user_name = #{userName,jdbcType=VARCHAR},-->
<!--      user_age = #{userAge,jdbcType=INTEGER}-->
<!--    where id = #{id,jdbcType=INTEGER}-->
<!--  </update>-->
</mapper>